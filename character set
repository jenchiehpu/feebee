字元編碼
計算機只認得二進位，即0跟1。因此所有的字元都會轉成二進位形式。
8個二進位可以有256種狀態，8個二進位代表一個byte，也稱為一個字節，一個字節有256個狀態。


1.ASCII
美國制定了一套字元編碼表，連結二進位和英文字和符號，這被稱為ASCII碼。ASCII共規定128個字元的編碼，比方說空白鍵（space）是32，二進位即是(00100000)。大寫的A為65，二進位即是（01000001），這128個符號只用了一個字節（byte）的後面7位，因此最前面的一位統一規定為0。


2.非ASCII
英文可以用128個字元，但其他國家的文字可能超過128，所以會用到第一位，和ASCII不同，ASCII的byte的第一位為0，但法語或是歐洲其他國家的第一位可能會被用到。像是法語的é編碼為130，二進位即是（100000010），因此歐洲國家使用的編碼最多可以到256個。

但還有一個問題，不同國家的編碼所對應的字元可能不一致，同樣是130，法語的編碼代表é，希伯來文代表字母Gimel (ג)，俄文編碼又代表另一個字母。
不過所有編碼中，0-127所表示的符號都是一樣的，不一樣的只有128-255這一段。
如果一個字節代表256個字元，那麼兩個字節（byte）應該是可以代表256*256 = 65536個字元。

3.Unicode
同一個二進位的數字，透過不同編碼方式，程式會解讀成不同的字元，造成語意上的錯誤，因此打開一份文檔，必須知道編碼方式，否則就出現亂碼了，出現亂碼是因為寫的人和收的人的編碼方式不同。

如果有一種編碼方式，能包含世界上所有的字元，每個字元都有獨一無二的編碼方式，那就不會有亂碼，這就是unicode。
unicode是很大的集合，現在規模可以容納100多萬個符號，比方U+0639代表阿拉伯字母Ain，U+0041代表英文字母大寫A，U+4E25代表漢字"嚴"。

4.Unicode的問題
Unicode只是一個符號集，規定符號的二進位代碼，但沒規定該如何儲存，這是什麼意思呢？
比方漢字"嚴"的unicode是十六進位的4E25，轉換成二進位為（100111000100101），有15位。代表儲存這個字元需要2個byte，其他更大的符號，可能需要3或4個byte。那這樣就有兩個問題。

第一個問題是，如何區別unicode和ASCII，計算機怎麼知道三個byte是代表三個符號（ASCII），還是代表一個符號（unicode）。
第二個問題是，英文字母用ASCII，一個byte就夠了，如果按造unicode，每個字元用3個或4個byte表示，那每個英文字母前面都會有2-3個byte都是0，浪費儲存空間，文檔大小會變大2-3倍。

缺點使得unicode很長一段期間無法推廣。

5.UTF-8
網路普及，文檔傳送方便，人們有強烈需求統一的字元編碼。
UTF-8就是使用最廣的一種unicode實現方式。其他方式有UTF-16，UTF-32，不過網路基本上都是用UTF-8。

UTF-8最大的特點是，為一種變長的編碼方式，可以使用1-4個byte表示一個字元，根據不同字元變化byte的長度。
有兩個編碼規則
(1)一個byte的字元，第一位設為0，後面7位為這個符號的unicode，因此對於英文字母，ASCII和unicode的編碼方式一樣。
(2)n個byte的字元（n>1），第一個byte的前n位都設為1，第n+1位設為0，後面byte的前2位一律設為10。剩下的二進位即為這個字元的unicode碼

Unicode符号范围     |        UTF-8编码方式
(十六进制)        |              （二进制）
----------------------+---------------------------------------------
0000 0000-0000 007F | 0xxxxxxx
0000 0080-0000 07FF | 110xxxxx 10xxxxxx
0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx

以漢字"嚴"為例

嚴的 Unicode 是4E25（100111000100101），嚴的unicode在第三行（0000 0800 - 0000 FFFF），嚴的UTF-8編碼需要3個byte，因此是
1110xxxx 10xxxxxx 10xxxxxx
從最後一個二進位開始，依序向前填入，多出的位補0，這樣就得到嚴的UTF-8編碼
11100100 10111000 10100101
轉換成十六進位就是E4B8A5

